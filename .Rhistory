setw("revaliew")
setwd("revaliew")
document()
library(roxygen2)
roxygen2::document()
document()
use_roxygen_md()
library(devtools)
document()
install.packages("testthat")
git remote add revaliew https://github.com/violetacln/revaliew
git remote add origin https://github.com/violetacln/revaliew
library(revaliew)
view_data(df)
view_data(df = ggplot2::diamonds)
library(revaliew)
revaliew::view_data(df = ggplot2::diamonds)
library(revaliew)
revaliew::view_data(df = ggplot2::diamonds)
library(revaliew)
roxygen2::()
roxygen2()
roxygen2::document()
library(roxygen2)
roxygen2::document()
document()
library(devtools)
document()
view_data(df = ggplot2::diamonds)
library(revaliew)
library(ggplot2)
view_data(df = ggplot2::diamonds)
library(revaliew)
devtools::document()
library(revaliew)
view_data(df = ggplot2::diamonds)
library(revaliew)
view_data(df = ggplot2::diamonds)
library(revaliew)
view_data(df = ggplot2::diamonds)
library(revaliew)
view_data(df = ggplot2::diamonds)
getOption("fftempdir")
ff:options(fftempdir = getwd())
library(ff)
ff:options(fftempdir = getwd())
getwd()
ff:options("fftempdir" = getwd())
setoptions("fftempdir" = getwd())
setOptions("fftempdir" = getwd())
library(revaliew)
library(revaliew)
view_data(df = ggplot2::diamonds)
DataExplorer::plot_intro(df)
DataExplorer::plot_missing(df)
packrat::init()
DataExplorer::create_report(ggplot::diamonds, y = "a", config = list("plot_bar" = list("with" = "b")))
DataExplorer::create_report(ggplot2::diamonds, y = "a", config = list("plot_bar" = list("with" = "b")))
DataExplorer::create_report(ggplot2::diamonds, config = list("plot_bar" = list("with" = "b")))
DataExplorer::create_report(ggplot2::diamonds)
self_contained: no
#,
# config = list("plot_bar" = list("with" = "b")))
DataExplorer::plot_bar(ggplot2::diamonds)
GGally::ggpairs(ggplot2::diamonds,
, aes(colour = occup) )
df <- ggplot2::diamonds
select(micro_s,
logwage,
eduShort,
occup,
econ_activ,
exper_total,
time_arbitr)
df <- ggplot2::diamonds ###just for testing ; to be removed ----*************
df
theme_set(theme_bw())
ggplot2::theme_set(theme_bw())
ggally::theme_set(theme_bw())
GGally::theme_set(theme_bw())
import (GGally)
library (GGally)
GGally::theme_set(theme_bw())
theme_set(theme_bw())
dnames <- names(split_columns(df)$discrete)
cnames <- names(split_columns(df)$continuous)
# names of variables which are discrete and continuous, using funModeling
dataExplorer::dnames <- names(split_columns(df)$discrete)
# names of variables which are discrete and continuous, using funModeling
funModeling::dnames <- names(split_columns(df)$discrete)
dnames <- names(funModeling::split_columns(df)$discrete)
cnames <- names(funModeling::split_columns(df)$continuous)
library(funModeling)
library(funModelling)
install.packages("funModeling")
library(funModeling)
dnames <- names(funModeling::split_columns(df)$discrete)
cnames <- names(funModeling::split_columns(df)$continuous)
dnames[1]
library(DataExplorer)
names(dataExplorer::split_columns(df)$discrete)
names(DataExplorer::split_columns(df)$discrete)
x <- dnames[1]
dnames <- names(DataExplorer::split_columns(df)$discrete)
cnames <- names(DataExplorer::split_columns(df)$continuous)
x <- dnames[1]
GGally::ggpairs(df,
, aes(colour = x ) )
dnames[1]
x
x[1]
as.character(x[1])
GGally::ggpairs(df,
, aes(colour = cut() )
)
cnames
Gally::ggpairs(df,
, aes(colour = carat )
)
GGally::ggpairs(df,
, aes(colour = carat )
)
GGally::ggpairs(select(df,cnames)
, aes(colour = carat )
)
library(dplyr)
select(df,cnames)
GGally::ggpairs(select(df,cnames)
, aes(colour = carat )
)
GGally::ggpairs(select(df,cnames)
, aes(colour = cut )
)
dnames
x
GGally::ggpairs(select(df,cnames)
, aes(colour = x )
)
as.character(dnames[1])
x <- as.character(dnames[1])   ###dnames[1]
GGally::ggpairs(select(df,cnames)
,aes(colour = x) )
x
df(dnames[1])
df[colnames=dnames[1]]
df[colnames=dnames[1],]
lapply(dnames, FUN=function(x) {
x <- as.character(dnames[1])   ###dnames[1]
GGally::ggpairs(select(df,cnames)
,aes(colour = x) )
})
df$V1
df$dnames[1]
lapply(cnames, FUN=function(x) {
c(
x,
funModeling::tukey_outlier(df$x)
)
}
)
x <- dnames[1]
dnames <- names(DataExplorer::split_columns(df)$discrete)
cnames <- names(DataExplorer::split_columns(df)$continuous)
x <- dnames[1]
GGally::ggpairs(select(df,cnames)
,aes(colour = df$x) )
df$x
x
x <- dnames[2]
x
df$x
head/df)
head(df)
cnames
dnames
dnames[2]
head(df$x)
xx <- dnames[2]
GGally::ggpairs(select(df,cnames)
,aes(colour = df$xx) )
xx <- dnames[2]
GGally::ggpairs(select(df,cnames)
,aes(colour = df$xx) )
lapply(cnames, FUN=function(x) {
c(
x,
funModeling::tukey_outlier(df$x)
)
}
)
xx
df$xx
df$color
lapply(dnames, FUN=function(var) {
GGally::ggpairs(select(df,cnames)
,aes(colour = df$var) )
)
lapply(dnames, FUN=function(var) {
GGally::ggpairs(select(df,cnames)
,aes(colour = df$var) )
})
lapply(cnames, FUN=function(x0) {
c(
x0,
funModeling::tukey_outlier(df$x0)
)
}
)
lapply(cnames, FUN=function(x0) {
c(
x0,
funModeling::hampel_outlier(df$x0)
)
}
)
dnames
df[cnames]
lapply(dnames, FUN=function(var) {
GGally::ggpairs(select(df,cnames)
,aes(colour = df[var]) )
})
lapply(cnames, FUN=function(x0) {
c(
x0,
funModeling::tukey_outlier(df[x0])
)
}
)
lapply(cnames, FUN=function(x0) {
c(
x0,
funModeling::tukey_outlier(df[x0])
)
}
)
cnames
x0
df[cut]
df["cut"]
lapply(cnames, FUN=function(x0) {
c(
x0,
funModeling::tukey_outlier(df[x0])
)
}
)
lapply(cnames, FUN=function(x0) {
c(
x0,
funModeling::tukey_outlier(as.data.frame(df)[x0])
)
}
)
as.data.frame(df)["cut"]
as.data.frame(df["cut"])
str(as.data.frame(df["cut"]))
str(as.data.frame(df)["cut"])
lapply(dnames, FUN=function(var) {
GGally::ggpairs(select(df,cnames)
,aes(colour = as.data.frame(df)[var]) )
})
select(df,cnames)
var <- "cut"
GGally::ggpairs(select(df,cnames)
,aes(colour = as.data.frame(df)[var]) )
levels(as.data.frame(df)[var]))
levels(as.data.frame(df)[var])
var <- "cut"
GGally::ggpairs(select(df,cnames)
,aes(colour = factor(as.data.frame(df)[var]))
)
lapply(dnames, FUN=function(var) {
var <- "cut"
GGally::ggpairs(select(df,cnames)
,aes(colour = factor(as.data.frame(df)[var])))
})
lapply(dnames, FUN=function(var) {
var <- "cut"
GGally::ggpairs( select(df,cnames)
,aes(
colour = factor(as.data.frame(df)[var])
)
)
}
)
ggpairs(select(micro_s,
logwage,
eduShort,
occup,
econ_activ,
exper_total,
time_arbitr)
, aes(colour = occup) )
var <- "cut"
factor(as.data.frame(df)[var])
var <- "cut"
GGally::ggpairs(
select(df,cnames)
,aes(
colour = factor(as.data.frame(df)[var])
)
)
var
GGally::ggpairs(
select(df,cnames)
,aes(
colour = factor(as.data.frame(df)[var])
)
)
df[var]
as.data.frame(df[var])
str(as.data.frame(df[var]))
str(df[var])
as.data.frame(df[var])[1]
var <- "cut"
GGally::ggpairs(
select(df,cnames)
,aes(
colour = as.data.frame(df[var])[1]
)
)
as.data.frame(df[var])[1]
str(as.data.frame(df[var])[1])
str((df[var])[1])
as.character(df[var])[1]
as.character(df[var])
(df[var])
as.factor(df[var])
levels(df[var])
levels(factor(df[var]))
factor(df[var])
factor(as.matrix(df[var])
)
levels(factor(as.matrix(df[var]))
)
GGally::ggpairs(
select(df,cnames)
,aes(
colour = levels(factor(as.matrix(df[var])))
)
)
df[var]
df[var][1,]
df[var][,1]
GGally::ggpairs(
select(df,cnames)
,aes(
colour = df[var][,1]
)
)
lapply(cnames, FUN=function(x0) {
c(
x0,
funModeling::hampel_outlier(df[x0])
)
}
)
x0
funModeling::hampel_outlier(df[x])
df[x])
df[x]
df[depth]
df[z]
df
funModeling::hampel_outlier(df[[z]])
df[[z]]
funModeling::hampel_outlier(df[["z"]])
lapply(cnames, FUN=function(x0) {
c(
x0,
funModeling::hampel_outlier(df[["x0"]])
)
}
)
lapply(cnames, FUN=function(x0) {
c(
x0,
funModeling::hampel_outlier(df[[x0]])
)
}
)
lapply(cnames, FUN=function(x0) {
c(
x0,
funModeling::tukey_outlier(as.data.frame(df)[[x0]])
)
}
)
lapply(cnames, FUN=function(x0) {
tabplot::tableplot(dat=df, sortCol=x0)
}
)
library(tabplot)
lapply(cnames, FUN=function(x0) {
tabplot::tableplot(dat=df, sortCol=x0)
}
)
library("tabplot")
install.packages("tabplot")
var
r <- "cut"
GGally::ggpairs(
select(df,cnames)
,aes(
colour = df[[var]]
)
)
lapply(dnames, FUN=function(var) {
GGally::ggpairs(
select(df,cnames)
,aes(
colour = df[[var]]
)
)
}
)
lapply(dnames, FUN=function(var) {
GGally::ggpairs(
df
#select(df,cnames)
,aes(
colour = df[[var]]
)
)
}
)
library(tabplot, magrittr)
install.packages(tabplot)
install.packages("tabplot")
df = ggplot2::diamonds
library(ggplot2)
install.packages("ggplot2")
df = ggplot2::diamonds
library(ggplot2)
df <- ggplot2::diamonds
if (nrow(df) > 50000) {df %>% df[sample(rownames(df), size=50000)]}
library(magrittr)
# table plots from tabplot package
# make ff package work correctly:
# with: set options(fftempdir = "path/to/your/folder") to a folder where you have access to
#getOption("fftempdir")
##ff:setOptions("fftempdir" = getwd())
if (nrow(df) > 50000) {df %>% df[sample(rownames(df), size=50000)]}    ### set this as on option whih could be adjusted
nrow(df)
df[sample(rownames(df), size=50),]
if (nrow(df) > 50000) {df %<>% df[sample(rownames(df), size=50000), replace=TRUE]}    ### set this as on option whih could be adjusted
if (nrow(df) > 50000) {df %<>% df[sample(rownames(df), size=50000)]}
# table plots from tabplot package
# make ff package work correctly:
# with: set options(fftempdir = "path/to/your/folder") to a folder where you have access to
#getOption("fftempdir")
##ff:setOptions("fftempdir" = getwd())
if (nrow(df) > 50000) {df %<>% df[sample(rownames(df), size=50), ]}    ### set this as on option whih could be adjusted
df[sample(rownames(df), size=50), ]
df %<>% df[sample(rownames(df), size=50), ]
df =df[sample(rownames(df), size=50), ]
df = ggplot2::diamonds
if (nrow(df) > 50000) {  df = df[sample(rownames(df), size=50), ]  }
library(tabplot)
lapply(dnames, FUN=function(var) {
DataExplorer::plot_boxplot(df, df[[var]] )
}
)
dnames <-names(split_columns(df)$discrete)
cnames <- names(split_columns(df)$continuous)
install.packages("O3")
install.packages("outliers")
library(revaliew)
library(revaliew)
library(devtools)
install.package(devtools)
install.packages(devtools)
install.packages("devtools")
